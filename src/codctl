#!/usr/bin/env python
#
# Hey Emacs, this is -*-python-*-
#
# Copyright 2013 Peter Liljenberg <peter.liljenberg@gmail.com>
#
# Distributed under an MIT license, please see LICENSE in the top dir.

import sys
import os
import time
import argparse

from codplayer import zerohub
from codplayer import config
from codplayer import db
from codplayer import command
from codplayer import state
from codplayer import full_version

return_code = 0

def main(args):
    try:
        cfg = config.MQConfig(args.config)
    except config.ConfigError, e:
        sys.exit('invalid configuration:\n{0}'.format(e))

    client = command.AsyncCommandRPCClient(
        zerohub.AsyncRPCClient(cfg.player_rpc, name = 'codctl'),
        on_error = handle_error)

    if args.command == 'state':
        client.call('state', on_response = print_response)
        client.call('rip_state', on_response = print_response)

        if args.follow:
            # set up a state subscription
            subscriber = state.StateClient(
                cfg.state,
                max_age_seconds = args.max_age_seconds,
                on_state = print_response,
                on_rip_state = print_response,
                on_disc = print_response
            )
            client.call('source', on_response = print_response)

            if args.timeout:
                zerohub.IOLoop.instance().add_timeout(time.time() + args.timeout, stop)

        else:
            # Otherwise stop on getting the last response
            client.call('source', on_response = print_response_and_stop)

            if args.timeout:
                zerohub.IOLoop.instance().add_timeout(time.time() + args.timeout, handle_timeout)

    # All other commands get sent to the daemon
    else:
        cmd_args = []

        if args.command == 'disc':
            if args.id:
                if (db.Database.is_valid_disc_id(args.id) or
                    db.Database.is_valid_db_id(args.id)):
                    cmd_args.append(args.id)
                else:
                    sys.exit('invalid disc or db id: {0}'.format(args.id))

        elif args.command == 'radio':
            if args.id is not None:
                cmd_args.append(args.id)

        on_response = print_response_and_stop
        if args.quiet:
            on_response = quiet_and_stop

        client.call(args.command, cmd_args, on_response = on_response)

        if args.timeout:
            zerohub.IOLoop.instance().add_timeout(time.time() + args.timeout, handle_timeout)

    # Kick off IO loop
    zerohub.IOLoop.instance().start()


def stop():
    zerohub.IOLoop.instance().stop()


def print_response(response):
    if response:
        print response


def print_response_and_stop(response):
    if response:
        print response
    stop()


def quiet_and_stop(response):
    stop()


def handle_error(error):
    return_code = 1
    if isinstance(error, command.CommandError):
        sys.stderr.write('codplayerd error: {0}\n'.format(error))
        stop()

    elif isinstance(error, command.ClientError):
        sys.stderr.write('codctl error: {0}\n'.format(error))

    else:
        # Just throw unknown errors
        raise error


def handle_timeout():
    sys.stderr.write('codctl error: timeout waiting for response\n')
    stop()


#
# Set up the command argument parsing
#

parser = argparse.ArgumentParser(description = 'codplayer control tool')
parser.add_argument('-c', '--config', help = 'path to codmq.conf')
parser.add_argument('-t', '--timeout', type = int,
                    help = 'give up command/stop updates after TIMEOUT seconds')
parser.add_argument('-q', '--quiet', action = 'store_true',
                    help = "don't print resulting state for action commands")
parser.add_argument('--version', action = 'version', version = full_version())

subparsers = parser.add_subparsers(help = 'command', dest = 'command')

parser_state = subparsers.add_parser(
    'state', help = 'output current player state')
parser_state.add_argument('-f', '--follow', action = 'store_true',
                          help = 'follow state updates, if supported by the publisher')
parser_state.add_argument('-m', '--max-age-seconds', type=int,
                          help = 'discard state updates older than this number of seconds')

parser_source = subparsers.add_parser(
    'source', help = 'get the current source disc')

parser_disc = subparsers.add_parser(
    'disc', help = 'notify player that a new disc has been inserted, or play disc from database')
parser_disc.add_argument('id', nargs = '?', help = 'Disc or database ID, if omitted inserted CD is played')

parser_radio = subparsers.add_parser(
    'radio', help = 'play a radio stream')
parser_radio.add_argument('id', nargs = '?',
                          help = ('Radio stream or index (counting from 0). '
                                  'If omitted the first stream is played. '
                                  'The special ID "toggle" will either start or stop streaming.'))

parser_play = subparsers.add_parser(
    'play', help = 'play stopped disc from start or resume paused disc')

parser_pause = subparsers.add_parser(
    'pause', help = 'pause playing disc')

parser_play_pause = subparsers.add_parser(
    'play_pause', help = 'toggle playing or pausing the disc')

parser_next = subparsers.add_parser(
    'next', help = 'go to the next track')

parser_prev = subparsers.add_parser(
    'prev', help = 'go to start of the track or the previous track')

parser_stop = subparsers.add_parser(
    'stop', help = 'stop playing the disc')

parser_eject = subparsers.add_parser(
    'eject', help = 'stop any playing disc and eject it physically')

parser_ejected = subparsers.add_parser(
    'ejected', help = 'inform codplayerd that a disc has been ejected physically')

parser_quit = subparsers.add_parser(
    'quit', help = 'tell player process to quit nicely')

parser_version = subparsers.add_parser(
    'version', help = 'get the version of the codplayer daemon')

if __name__ == '__main__':
    args = parser.parse_args()
    main(args)
